version: 2.1

anchors:
  - &imageTag ${CIRCLE_SHA1:0:7}

orbs:
  docker: circleci/docker@1.5.0
  getty-devops-release: thegetty/devops-orb@1.3

workflows:
  build:
    jobs:
      - build:
          context: GETTY
  poc:
    jobs:
      - pocBuild:
          context: GETTY
      - getty-devops-release/deployTo:
          context: GETTY
          tag: *imageTag
          service: lod-gateway-archivesspace-l1 lod-gateway-media-l2 lod-gateway-museum-collection-l2 lod-gateway-otmm-l1 lod-gateway-rcv-l2 lod-gateway-rosetta-l1 lod-gateway-vocab-l2 lod-gateway-provenance-l2 lod-gateway-image-analysis-l2
          #service1:
          # ...
          #service10:
          environment: stage
          requires:
            - pocBuild
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /.*/
      - getty-devops-release/deployTo:
          context: GETTY
          tag: *imageTag
          service: lod-gateway-archivesspace-l1 lod-gateway-media-l2 lod-gateway-museum-collection-l2 lod-gateway-otmm-l1 lod-gateway-rcv-l2 lod-gateway-rosetta-l1 lod-gateway-vocab-l2 lod-gateway-thesaurus-l2
          environment: prd
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v1.*$/

jobs:
  build:
    machine:
      docker_layer_caching: true
    steps:
      - setup
      - build
      - test
      - store

  pocBuild:
    machine:
      docker_layer_caching: true
    steps:
      - setup
      - getty-devops-release/setup-aws
      - build: &imageDetails
          image: ${ECR_ACCOUNT_URL}/jpgt-${CIRCLE_PROJECT_REPONAME}
          tag: *imageTag
      - test:
          <<: *imageDetails
      - store
      - when:
          condition:
            or:
              - equal: [master, << pipeline.git.branch >>]
          steps:
            - getty-devops-release/push-to-ecr:
                image: jpgt-${CIRCLE_PROJECT_REPONAME}
                tag: *imageTag
commands:
  setup:
    steps:
      - checkout
      - run:
          name: Prepare output
          command: |
            mkdir -p /tmp/output
            chmod -R 777 /tmp/output
  build:
    parameters:
      image:
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}
      tag:
        type: string
        default: latest
    steps:
      - docker/build:
          dockerfile: Dockerfile.poc
          image: << parameters.image >>
          tag: << parameters.tag >>
  test:
    parameters:
      image:
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}
      tag:
        type: string
        default: latest
    steps:
      - run:
          name: Linting with Black
          command: >
            docker run
            << parameters.image>>:<< parameters.tag >>
            black --check .
      - run:
          name: Testing using pytest
          command: >
            docker run
            --env-file .env.example
            --env DATABASE=sqlite://
            --env APPLICATION_NAMESPACE="ns"
            --volume /tmp/output:/output
            << parameters.image>>:<< parameters.tag >>
            pytest
            --junitxml=/output/test-results/pytest/junit.xml
            --cov=flaskapp
            --cov-report html:/output/test-reports/pytest
  store:
    steps:
      - store_test_results:
          path: /tmp/output/test-results
      - store_artifacts:
          path: /tmp/output/test-reports
          destination: reports
