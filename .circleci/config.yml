version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws-ecr: circleci/aws-ecr@6.8.2
  docker: circleci/docker@1.0.1

workflows: # a single workflow with a single job called build
    build:
        jobs:
            - build:
                context: GETTY
    poc:
      jobs:
        - pocBuild:
            context: GETTY
#        - pocPush:
#            context: GETTY
#            requires:
#              - pocBuild
#            filters:
#              branches:
#                only:
#                  - master
#                  - /poc-.*/


# define our test jobs
jobs:
    build:
        machine:
            docker_layer_caching: true

        steps:
            - setup
            - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            - run: docker build -t lod-gateway-web-service -f Dockerfile.web-service .
            - test
            - store

    pocBuild:
      machine:
        docker_layer_caching: true
      steps:
        - setup
        - build
        - test
        - store
        - push

commands:
  setup:
    steps:
      - checkout
      - run:
          name: Prepare output
          command: |
            mkdir -p /tmp/output
            chmod -R 777 /tmp/output
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: ECR_ACCESS_KEY_ID
          aws-secret-access-key: ECR_SECRET_ACCESS_KEY
          aws-region: ECR_REGION
      - aws-ecr/ecr-login:
          region: ECR_REGION
  build:
    steps:
      - docker/build:
          dockerfile: Dockerfile.poc
          image: ${ECR_ACCOUNT_URL}/jpgt-${CIRCLE_PROJECT_REPONAME}
          tag: << pipeline.number >>-${CIRCLE_SHA1}
  test:
    steps:
      - run:
          name: Linting with Black
          command: >
            docker run
            ${ECR_ACCOUNT_URL}/jpgt-${CIRCLE_PROJECT_REPONAME}:<< pipeline.number >>-${CIRCLE_SHA1}
            black --check .
      - run:
          name: Testing using pytest
          command: >
            docker run
            --env-file .env.example
            --env DATABASE=sqlite://
            --env APPLICATION_NAMESPACE="ns"
            --volume /tmp/output:/output
            ${ECR_ACCOUNT_URL}/jpgt-${CIRCLE_PROJECT_REPONAME}:<< pipeline.number >>-${CIRCLE_SHA1}
            pytest
            --junitxml=/output/test-results/pytest/junit.xml
            --cov=flaskapp
            --cov-report html:/output/test-reports/pytest
  store:
    steps:
      - store_test_results:
          path: /tmp/output/test-results
      - store_artifacts:
          path: /tmp/output/test-reports
          destination: reports
  push:
    steps:
      - when:
          condition:
            or:
              - equal: [ master, << pipeline.git.branch >> ]
              - equal: [ poc-ecr-push, << pipeline.git.branch >> ]
          steps:
            - aws-ecr/push-image:
                account-url: ECR_ACCOUNT_URL
                repo: jpgt-${CIRCLE_PROJECT_REPONAME}
                tag: << pipeline.number >>-${CIRCLE_SHA1}
