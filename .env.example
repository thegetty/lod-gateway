# Basic application settings:
LOD_AS_DESC=Getty Activity Stream (Example)

DATABASE=postgresql://postgres:postgres@postgres/postgres
PGDATA=/var/lib/postgresql/data
POSTGRES_PASSWORD=postgres
POSTGRES_USER=postgres

FLASK_GZIP_COMPRESSION=True
FLASK_APP=/app/flaskapp
FLASK_ENV=production

FLASK_RUN_PORT=5100

# Whether to run the flask db upgrade command on startup:
DB_UPGRADE_ON_START=true

# Workers -> somewhere between 2-4 per core
WEB_WORKERS=1

# I've seen values from 90 to 900 for deployed cloud-based services
# which is far in excess of the defaults. Using 600 as a default
WEB_TIMEOUT=600

# Can be deployed using worker/threads model (sync/gthreads) or geventlet

# threads -> 2-4, depending on type of typical load/DB load
# WORKER_CLASS=gthreads
# WEB_THREADS=2

# gevent
WORKER_CLASS=gevent
WORKER_CONNECTIONS=100

# Verbosity levels are CRITICAL, ERROR, WARNING, INFO, DEBUG
DEBUG_LEVEL=INFO

# JSON formatted logging, or false for standard?
JSON_LOGGING=false

# Also format the access logs as json? false to leave as normal
ACCESS_JSON_LOGGING=false

# Auth Token setup:
AUTHORIZATION_TOKEN=AuthToken

# HOST and Namespace (subpath) configuration:
BASE_URL=http://localhost:5100
APPLICATION_NAMESPACE=museum/collection

# RDF related configuration:
RDF_NAMESPACE=museum/collection
PROCESS_RDF=True
SPARQL_QUERY_ENDPOINT=http://fuseki:3030/ds/sparql
SPARQL_UPDATE_ENDPOINT=http://fuseki:3030/ds/update

# Use PyLD for parsing/reformatting JSON-LD?
# Set to False to use RDFLib instead.
USE_PYLD_REFORMAT=True

# Base graph functionality:
## Name of basegraph object:
#RDF_BASE_GRAPH=

## FOR TESTING ONLY! Reload basegraph if ingested (will only affect worker that handles the ingest!)
## Base graph changes should be handled by updating the resource and then reloading the service fully
TESTMODE_BASEGRAPH=False

# Versioning:
KEEP_LAST_VERSION=True
# Keep even after deletion? Returns 404 for the times it is gone.
KEEP_VERSIONS_AFTER_DELETION=False
# Do users need to authenticate to see old versions?
VERSIONING_AUTHENTICATION=True
# Memento TimeMap format default: (application/json or application/link-format)
MEMENTO_PREFERRED_FORMAT=application/link-format

# JSON output options:
JSON_SORT_KEYS=False
JSON_AS_ASCII=False
# Prefix search page size:
ITEMS_PER_PAGE=100

# Sub-addressing resolving:
SUBADDRESSING=True


# Add prefix to relative IDs in resources
# Can use GET param '?relativeid=true' to skip prefixing on request
PREFIX_RECORD_IDS=RECURSIVE

# Id prefixing will not prefix any RDF shorthand URIs (eg 'rdfs:label') in the `id`/`@id` property
# It does this by resolving the context, if present, and getting the list of prefixes to ignore 
# NB this only affects prefixes used with a colon (eg 'rdf:type' will be skipped if 'rdf' is in the context but
# 'rdf/type' will be prefixed by the server's host and subpath as normal.)
# The prefixes for a given context will be cached for a number of seconds (default 12 hours as below):
CONTEXTPREFIX_TTL=43200

# RDF Context Cache
## LOD Gateway runs a cache for context documents, defaulting to 30 minutes in cache per context
RDF_CONTEXT_CACHE_EXPIRES=30
## This can be prefilled by RDF_CONTEXT_CACHE (in JSON encoding). See 'document_loader' notes in the base_graph_utils.py module for details.
# eg:
# RDF_CONTEXT_CACHE={"https://linked.art/ns/v1/linked-art.json": {"expires": null, "contextUrl": null, "documentUrl": null, "document": {"@context": {"@version": 1.1, "crm": "http://www.cidoc-crm.org/cidoc-crm/", "sci": "http://www.ics.forth.gr/isl/CRMsci/" .....

# Content Profile information
# CONTENT_PROFILE_DATA_URL=  .. url to the JSON-encoded PatternSet export for the profile SPARQL patterns
# Or, instead of retrieving it from a URL resourse, it can be given in the following variable as
# a JSON-encoded string.
# CONTENT_PROFILE_DATA = {"name": "Simplified Dublin Core", "description": "No description given.", "url": "https://raw.githubusercontent.com/thegetty/getty-jsonld-sparql-patterns/refs/heads/main/src/gettysparqlpatterns/data/crmtodublincore.json", "patterns": [{"name": "InformationObject as DC", "description": "Views a CRM InformationObject in terms of Simplified Dublin Core", "sparql_pattern": "PREFIX aat: <http://vocab.getty.edu/aat/>\nPREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterm: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\nCONSTRUCT {\n  <$URI> dc:identifier ?identifier ;\n     dc:title ?title ;\n     dc:description ?note ;\n     dc:creator ?agent_name ;\n     dc:date ?date_range ;\n     dc:date ?date_expression ;\n     dc:language ?lang ;\n     dc:language ?lang_as_text ;\n     dc:subject ?subject .\n  ?subject rdfs:label ?subject_text .\n  \n}\nWHERE {\nSELECT ?identifier ?title ?note ?subject ?subject_text ?date_range ?date_expression ?lang_as_text ?lang ?agent_name\n    WHERE {\n  GRAPH <$URI> {\n  <$URI> crm:P1_is_identified_by ?id_block .\n  ?id_block crm:P2_has_type ?id_type ;\n            crm:P190_has_symbolic_content ?identifier_text \n    BIND(CONCAT(?identifier_text, \" (\", STR(?id_type), \")\") as ?identifier) .\n  <$URI> rdfs:label ?title .\n      OPTIONAL {\n       <$URI> crm:P72_has_language ?lang .\n        ?lang rdfs:label ?lang_as_text\n      }\n     OPTIONAL {\n  <$URI> crm:P129_is_about ?subject .\n        ?subject a crm:E33_Linguistic_Object ;\n            rdfs:label ?subject_text\n      }\n      OPTIONAL {\n   <$URI> crm:P67i_is_referred_to_by ?notes .\n      ?notes crm:P2_has_type ?note_type ;\n            crm:P190_has_symbolic_content ?note_text \n      BIND(CONCAT(\"(\", STR(?note_type), \") \", ?note_text) as ?note) .\n      }\n      OPTIONAL {\n        ?prod_act a crm:E12_Production ;\n            OPTIONAL {\n        \t?prod_act  crm:P9_consists_of ?activities .\n            ?activities crm:P14_carried_out_by ?agent .\n            ?agent rdfs:label ?agent_name .\n        }\n        OPTIONAL {\n          ?prod_act crm:P4_has_time-span ?timespan .\n          ?timespan crm:P82a_begin_of_the_begin ?begin ;\n    \t\t\t    crm:P82b_end_of_the_end ?end \n          OPTIONAL {\n        BIND(CONCAT(STR(?begin), \" - \", STR(?end)) as ?date_range)\n         ?timespan crm:P1_is_identified_by ?expression .\n         ?expression a crm:E33_E41_Linguistic_Appellation ;\n    \t\t\t\t   crm:P190_has_symbolic_content ?date_expression ;\n        }\n      }\n      }\n  }\n}\n}\n", "stype": "construct", "keyword_parameters": ["URI"], "default_values": {}, "applies_to": ["InformationObject", "HumanMadeObject"], "ask_filter": null, "framing": null, "profile_uri": "urn:getty:dublincore"}]}

# The following profile is used for testing:
CONTENT_PROFILE_DATA = '{"name": "Simplified Dublin Core", "description": "No description given.", "url": "https://raw.githubusercontent.com/thegetty/getty-jsonld-sparql-patterns/refs/heads/main/src/gettysparqlpatterns/data/crmtodublincore.json", "patterns": [{"name": "InformationObject as DC", "description": "Views a CRM InformationObject in terms of Simplified Dublin Core", "sparql_pattern": "PREFIX aat: <http://vocab.getty.edu/aat/>\nPREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterm: <http://purl.org/dc/terms/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\nCONSTRUCT {\n  <$URI> dc:identifier ?identifier ;\n     dc:title ?title ;\n     dc:description ?note ;\n     dc:creator ?agent_name ;\n     dc:date ?date_range ;\n     dc:date ?date_expression ;\n     dc:language ?lang ;\n     dc:language ?lang_as_text ;\n     dc:subject ?subject .\n  ?subject rdfs:label ?subject_text .\n  \n}\nWHERE {\nSELECT ?identifier ?title ?note ?subject ?subject_text ?date_range ?date_expression ?lang_as_text ?lang ?agent_name\n    WHERE {\n  GRAPH <$URI> {\n  <$URI> crm:P1_is_identified_by ?id_block .\n  ?id_block crm:P2_has_type ?id_type ;\n            crm:P190_has_symbolic_content ?identifier_text \n    BIND(CONCAT(?identifier_text, \" (\", STR(?id_type), \")\") as ?identifier) .\n  <$URI> rdfs:label ?title .\n      OPTIONAL {\n       <$URI> crm:P72_has_language ?lang .\n        ?lang rdfs:label ?lang_as_text\n      }\n     OPTIONAL {\n  <$URI> crm:P129_is_about ?subject .\n        ?subject a crm:E33_Linguistic_Object ;\n            rdfs:label ?subject_text\n      }\n      OPTIONAL {\n   <$URI> crm:P67i_is_referred_to_by ?notes .\n      ?notes crm:P2_has_type ?note_type ;\n            crm:P190_has_symbolic_content ?note_text \n      BIND(CONCAT(\"(\", STR(?note_type), \") \", ?note_text) as ?note) .\n      }\n      OPTIONAL {\n        ?prod_act a crm:E12_Production ;\n            OPTIONAL {\n        \t?prod_act  crm:P9_consists_of ?activities .\n            ?activities crm:P14_carried_out_by ?agent .\n            ?agent rdfs:label ?agent_name .\n        }\n        OPTIONAL {\n          ?prod_act crm:P4_has_time-span ?timespan .\n          ?timespan crm:P82a_begin_of_the_begin ?begin ;\n    \t\t\t    crm:P82b_end_of_the_end ?end \n          OPTIONAL {\n        BIND(CONCAT(STR(?begin), \" - \", STR(?end)) as ?date_range)\n         ?timespan crm:P1_is_identified_by ?expression .\n         ?expression a crm:E33_E41_Linguistic_Appellation ;\n    \t\t\t\t   crm:P190_has_symbolic_content ?date_expression ;\n        }\n      }\n      }\n  }\n}\n}\n", "stype": "construct", "keyword_parameters": ["URI"], "default_values": {}, "applies_to": ["InformationObject"], "ask_filter": null, "framing": null, "profile_uri": "urn:getty:dublincore"}, {"name": "LinguisticObject to dublincore", "description": "No description given", "sparql_pattern": "PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nCONSTRUCT {\n  <$URI> dc:title ?title ;\n         dc:description ?content ;\n         dc:type ?type ;\n         dc:type ?type_name .\n} WHERE {\n SELECT ?title ?content ?type ?type_name WHERE {\n    <$URI> a crm:E33_Linguistic_Object ;\n           rdfs:label ?title ;\n           crm:P2_has_type ?type ;\n           crm:P190_has_symbolic_content ?content .\n    ?type rdfs:label ?type_name .\n  }\n}", "stype": "construct", "keyword_parameters": ["URI"], "default_values": {}, "applies_to": ["LinguisticObject"], "ask_filter": null, "framing": null, "profile_uri": "urn:getty:dublincore"}]}'