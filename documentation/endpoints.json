{
	"openapi": "3.0.3",
	"info": {
		"title": "Getty LOD Gateway",
		"description": "This OpenAPI document describes the endpoints available for the Getty LOD Gateway. The current endpoints comprise of an Activity Streams endpoint that can be polled to discover changes in the data stored by the Gateway, a record retrieval endpoint that provides access to the available records, and a credentialed authenticated 'ingest' endpoint for storing, updating, and deleting data within the Gateway.",
		"version": "1.0.1",
		"contact": {
			"name": "Daniel Sissman",
			"url": "https://data.getty.edu/museum/collection",
			"email": "dsissman@getty.edu"
		}
	},
	"servers": [
		{
			"url": "https://data.getty.edu",
			"description": "Production Host for Getty LOD Gateway Instances"
		},
		{
			"url": "https://staging-data.getty.edu",
			"description": "Staging Host for Getty LOD Gateway Instances"
		}
	],
	"paths": {
		"/{namespace}/activity-stream": {
			"get": {
				"description": "The Activity Stream summary endpoint for the LOD Gateway. This endpoint exposes an Activity Stream version 2.0 compliant feed that can be polled to discover changes to data stored within the Gateway. This base Activity Stream endpoint enables systems to discover how many items are currently available from the stream, and to obtain the current URLs for the first and last pages of the stream.",
				"parameters": [
					{
						"in": "path",
						"name": "namespace",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The namespace string identifying the desired LOD Gateway instance, such as `museum/collection`, `vocab/aat`, `vocab/tgn`, `vocab/ulan`, etc.",
						"example": "museum/collection"
					}
				],
				"responses": {
					"200": {
						"description": "A response including the type of the stream, an OrderedCollection, in the Gateway's case, the current total count of items in the stream, the page start index, and URLs referencing the first and last pages of the Activity Stream.",
						"content": {
							"application/activity+json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/37349828/ordered-collection.json"
								}
							}
						}
					},
					"500": {
						"description": "A error occurred at the server when trying to generate the Activity Stream response."
					}
				}
			}
		},
		"/{namespace}/activity-stream/page/{pageNumber}": {
			"get": {
				"description": "The Activity Stream page endpoint for the LOD Gateway",
				"parameters": [
					{
						"in": "path",
						"name": "namespace",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The namespace string identifying the desired LOD Gateway instance, such as `museum/collection`.",
						"example": "museum/collection"
					},
					{
						"in": "path",
						"name": "pageNumber",
						"schema": {
							"type": "integer",
							"minimum": 1
						},
						"required": true,
						"description": "Numeric index of the desired page.",
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "A successful response containing the desired page from the Activity Stream.",
						"content": {
							"application/activity+json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/37349829/ordered-collection-page.json"
								}
							}
						}
					},
					"404": {
						"description": "A response noting that the desired page does not exist. The page offset should be checked to ensure that it is valid, and that the request URL has been specified correctly."
					},
					"500": {
						"description": "A error occurred at the server when trying to generate the Activity Stream response."
					}
				}
			}
		},
		"/{namespace}/{entity}/{ID}": {
			"get": {
				"description": "The record retrieval endpoint for the LOD Gateway",
				"parameters": [
					{
						"in": "path",
						"name": "namespace",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The namespace string identifying the desired LOD Gateway instance, such as `museum/collection`, `vocab/aat`, `vocab/tgn`, `vocab/ulan`, etc.",
						"example": "museum/collection"
					},
					{
						"in": "path",
						"name": "entity",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The entity type name string identifying the desired entity type, such as `activity`, `document`, `exhibition`, `group`, `object`, `person`, `place`, `term`, etc.",
						"example": "person"
					},
					{
						"in": "path",
						"name": "ID",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The entity ID string identifying the desired entity, such as `c88b3df0-de91-4f5b-a9ef-7b2b9a6d8abb`, `ABC`, `300404626`, etc.",
						"example": "c3a876a9-5333-40d5-8488-6cc722058f5e"
					}
				],
				"responses": {
					"200": {
						"description": "A successful response containing the desired record from the LOD Gateway.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38192278/object.json"
								}
							}
						}
					},
					"404": {
						"description": "A response noting that the desired record does not exist."
					},
					"500": {
						"description": "A error occurred at the server when trying to retrieve the desired record."
					}
				}
			}
		},
		"/{namespace}/ingest": {
			"post": {
				"description": "The record ingest endpoint for the LOD Gateway",
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The required `Authorization` header used to authorize and authenticate the `ingest` request.",
						"example": "Bearer <token>"
					},
					{
						"in": "path",
						"name": "namespace",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The namespace string identifying the desired LOD Gateway instance, such as `museum/collection`, `vocab/aat`, `vocab/tgn`, `vocab/ulan`, etc.",
						"example": "museum/collection"
					}
				],
				"requestBody": {
					"description": "The `ingest` endpoint's `POST` request body should consist of newline-delimited JSON, containing one or more valid serialized JSON objects delimited by line-break characters `\\n` to ingest into the LOD Gateway. Each JSON object MUST contain an `id` attribute with a relative URL ID represented as a string. Any other JSON object attributes are optional.\n\nTo delete an existing record, one should create a serialized JSON object that specifies the record's relative URL ID within the JSON object's `id` attribute along with the special `_delete` attribute with a boolean value of `true`. Record deletion requests may be included along with record creation/update requests, or submitted as their own requests; one may use whichever option makes sense from a dataset/workflow perspective for their given use-case.\n\nIt should be noted that when more than one JSON serialized record is submitted to the `ingest` endpoint, that this group of records are treat as a transaction, and either all of the records will be processed successfully with all of the changes committed, or if one or more fail to be processed, then all of the changes in the group will be rolled-back. The transactional nature of an `ingest` request is useful to ensure that a group of related records/changes either all succeed or all fail, so as to avoid any incomplete changes to data. However, this feature is something that should be considered when determining how or if to group records as part of an `ingest` request.\n\nThe last point of note is that one MUST ensure that the `POST` request body is UTF-8 encoded to ensure the valid representation and handling of the serialized JSON contained within.",
					
					"required": true,
					
					"content": {
						"text/plain": {
							"schema": {
								"$comment": "Unfortunately it does not seem possible to represent newline-delimited JSON using JSON Schema and it likely fails general `application/json` validation unless the JSON parser being used is newline-delimited JSON aware. So we define the request body here as `text/plain` instead.",
								
								"type": "string",
								
								"example": "{\"id\":\"object/c88b3df0-de91-4f5b-a9ef-7b2b9a6d8abb\",\"type\":\"HumanMadeObject\",\"_label\":\"Irises\"}\n {\"id\":\"person/c3a876a9-5333-40d5-8488-6cc722058f5e\",\"type\":\"Person\",\"_label\":\"Vincent van Gogh\"}\n {\"id\":\"group/2c81dbb8-0a0c-47eb-a56f-0d218a974f7d\",\"_delete\":true}"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Indicates that the 'ingest' POST request was successful.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249479/ingest-success.json"
								}
							}
						}
					},
					"401": {
						"description": "Indicates that the authorization to perform the 'ingest' POST request was unsuccessful. Ensure that the authorization credentials are supplied correctly via the Authorization HTTP header.\n\nFurther information about the error may be reported in the JSON serialized response body.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249478/ingest-error.json"
								},
								"example": "{\"errors\": [{\"status\": 401, \"title\": \"Wrong Authorization Token\", \"detail\": \"Authorization token is wrong or missing\"}]}"
							}
						}
					},
					"405": {
						"description": "Indicates that the request method used to perform the 'ingest' request was invalid. The 'ingest' endpoint only supports the POST method. Ensure that the request is being made correctly.\n\nFurther information about the error may be reported in the JSON serialized response body.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249478/ingest-error.json"
								},
								"example": "{\"errors\": [{\"status\": 405, \"title\": \"Forbidden Method\", \"detail\": \"For the requested URL only 'POST' method is allowed\"}]}"
							}
						}
					},
					"422": {
						"description": "Indicates that the JSON serialized request body supplied to perform the 'ingest' request was invalid. Ensure that the JSON serialized request body is valid and conforms to the expectations of the LOD Gateway.\n\nFurther information about the error will be reported in the JSON serialized response body, indicating with more detail what caused the `422 Unprocessible Entity` error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249478/ingest-error.json"
								},
								"example": "{\"errors\": [{\"status\": 422, \"source\": {\"line number\": 2}, \"title\": \"Invalid JSON\", \"detail\": \"Could not parse JSON record\"}]}"
							}
						}
					},
					"500": {
						"description": "Indicates that the 'ingest' POST request was unsuccessful.\n\nFurther information about the error is reported in the JSON serialized response body.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249478/ingest-error.json"
								},
								"example": "{\"errors\": [{\"status\": 500, \"title\": \"Neptune Error\", \"detail\": \"Neptune connection cannot be established\"}]}"
							}
						}
					},
					"503": {
						"description": "Indicates that the 'ingest' POST service is unavailable.\n\nFurther information about the error should be reported in the JSON serialized response body.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "http://developer.getty.edu/documentation/node/38249478/ingest-error.json"
								},
								"example": "{\"errors\": [{\"status\": 503, \"title\": \"Service Unavailable\", \"detail\": \"Cannot perform database operation\"}]}"
							}
						}
					}
				}
			}
		}
	}
}